{"version":3,"sources":["assets/images/full_moon.png","assets/images/favicon.ico","assets/images/wolf.png","components/Landing/Landing.js","components/NavBar/NavBar.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Landing","Container","fluid","Row","id","Col","className","to","lg","md","sm","src","wolf","alt","moon","NavBar","useState","isOpen","setIsOpen","Navbar","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","NavbarText","Home","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,gTCwC5BC,MAjCf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAO,GAChB,kBAACC,EAAA,EAAD,CAAKC,GAAG,eACN,kBAACC,EAAA,EAAD,KACE,wBAAIC,UAAU,eAAd,aACY,8BAAM,kBAAC,IAAD,CAAMC,GAAG,QAAQD,UAAU,SAA3B,aAKtB,kBAACH,EAAA,EAAD,CAAKC,GAAG,YACN,kBAACC,EAAA,EAAD,CAAKG,GAAG,IAAIC,GAAG,KAAKC,GAAG,MACrB,yBAAKN,GAAG,kBACN,yBAAKO,IAAKC,IAAMR,GAAG,aAAaS,IAAI,gBAGxC,kBAACR,EAAA,EAAD,CAAKG,GAAG,IAAIC,GAAG,KAAKC,GAAG,MACrB,yBAAKN,GAAG,kBACN,yBAAKO,IAAKG,IAAMV,GAAG,aAAaS,IAAI,iBAI1C,kBAACV,EAAA,EAAD,KACE,4BAAQG,UAAU,YAEhB,uBAAGF,GAAG,aAAN,+B,+FCmCKW,MAhDf,WAAmB,IAAD,EACYC,oBAAS,GADrB,mBACTC,EADS,KACDC,EADC,KAIhB,OACE,kBAACC,EAAA,EAAD,CAAQC,OAAO,MAEb,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAChB,yBAAKX,IAAKC,IAAMC,IAAI,UAEtB,kBAACU,EAAA,EAAD,CAAeC,QAPJ,kBAAMN,GAAWD,MAQ5B,kBAACQ,EAAA,EAAD,CAAUR,OAAQA,EAAQS,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKrB,UAAU,UAAUoB,QAAM,GAC7B,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASP,KAAK,WAAd,WAEF,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASP,KAAK,OAAd,OAEF,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASP,KAAK,cAAd,eAoBJ,kBAACQ,EAAA,EAAD,kBACY,2C,MC7CLC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,wD,MCcSC,MAnBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,yBAAK5B,UAAU,eACb,kBAAC,EAAD,QAGJ,kBAAC,IAAD,CAAO4B,KAAK,SACV,yBAAK5B,UAAU,eACb,kBAAC,EAAD,WCLQ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba0da45c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/full_moon.d078ce85.png\";","module.exports = __webpack_public_path__ + \"static/media/favicon.0a811079.ico\";","module.exports = __webpack_public_path__ + \"static/media/wolf.0a811079.png\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport moon from \"../../assets/images/full_moon.png\";\nimport wolf from \"../../assets/images/wolf.png\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport \"./Landing.css\";\n\nfunction Landing() {\n  return (\n    <Container fluid={true}>\n      <Row id=\"home_header\">\n        <Col>\n          <h1 className=\"text-center\">\n            full moon <span><Link to='/home' className='pulse'>alpha</Link></span>\n          </h1>\n        </Col>\n      </Row>\n\n      <Row id=\"moon_row\">\n        <Col lg=\"6\" md=\"12\" sm=\"12\">\n          <div id=\"moon_container\">\n            <img src={wolf} id=\"wolf-image\" alt=\"full moon\" />\n          </div>\n        </Col>\n        <Col lg=\"6\" md=\"12\" sm=\"12\">\n          <div id=\"moon_container\">\n            <img src={moon} id=\"moon_image\" alt=\"full moon\" />\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <footer className=\"col-lg-3\">\n          {/* <footer className=\"col-lg-3 col-sm-12 col-xs-12 text-center\"> */}\n          <p id=\"copyright\">&copy;gHgraveDesigns 2020</p>\n        </footer>\n      </Row>\n    </Container>\n  );\n}\n\nexport default Landing;","import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText,\n} from \"reactstrap\";\n\nimport wolf from \"../../assets/images/favicon.ico\";\nimport moon from \"../../assets/images/full_moon.png\";\nimport './NavBar.css'\n\nfunction NavBar() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n  return (\n    <Navbar expand=\"md\">\n      {/* <Navbar color=\"dark\"  danger expand=\"md\"> */}\n      <NavbarBrand href=\"/\">\n        <img src={wolf} alt=\"wolf\" />\n      </NavbarBrand>\n      <NavbarToggler onClick={toggle} />\n      <Collapse isOpen={isOpen} navbar>\n        <Nav className=\"mr-auto\" navbar>\n          <NavItem>\n            <NavLink href=\"/movies\">Movies</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"/tv\">TV</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"/resources\">Resources</NavLink>\n          </NavItem>\n          {/* <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                Resources\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem>\n                  Option 1\n                </DropdownItem>\n                <DropdownItem>\n                  Option 2\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem>\n                  Reset\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown> */}\n        </Nav>\n        <NavbarText>\n          full moon <span>alpha</span>\n        </NavbarText>\n      </Collapse>\n    </Navbar>\n  );\n}\n\nexport default NavBar;\n","import React, { useState } from \"react\";\nimport NavBar from \"../NavBar/NavBar\";\n\nimport wolf from \"../../assets/images/favicon.ico\";\nimport moon from \"../../assets/images/full_moon.png\";\nimport \"./Home.css\";\n\nfunction Home() {\n  return (\n    <div>\n      <NavBar />\n      <h1>I am the Home Page!!!!</h1>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Landing from \"./components/Landing/Landing\";\nimport Home from \"./components/Home/Home\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <div className=\"App overlay\">\n            <Landing />\n          </div>\n        </Route>\n        <Route path=\"/home\">\n          <div className=\"App overlay\">\n            <Home />\n          </div>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}